write_rds(roadsDataChi, "app/census team data/Bike Routes/roadsDataChi.RDS")
read_rds("app/census team data/Bike Routes/bikeRouteDataFort.RDS")
read_rds("app/census team data/Bike Routes/roadsDataChi.RDS")
ui <-
navbarPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
"Equiticity",
tabPanel("map", plotOutput("plot")),
tabPanel("demographics charts", "testing"),
tabPanel("panel 3", "three"),
navbarMenu("subpanels",
tabPanel("panel 4a", "four-a"),
tabPanel("panel 4b", "four-b"),
tabPanel("panel 4c", "four-c")
),
tabPanel("About", "TEXT")
) %>%
fluidPage(
navlistPanel(
id = "tabset",
"Heading 1",
tabPanel("panel 1", "Panel one contents"),
"Heading 2",
tabPanel("panel 2", "Panel two contents"),
tabPanel("panel 3", "Panel three contents")
),
titlePanel("Divvy stations in Chicago"),
sidebarLayout(
sidebarPanel(
numericInput("m", "Number of samples:", 2, min = 1, max = 100)
),
mainPanel(
plotOutput("hist"),
plotOutput("plot"),
tabsetPanel(
id = "tabset",
tabPanel("panel 1", "one"),
tabPanel("panel 2", "two"),
tabPanel("panel 3", "three")
)
runApp('app')
read_rds("census team data/Bike Routes/bikeRouteDataFort.RDS")
library(broom)
library(bslib)
library(dplyr)
library(ggplot2)
library(rgdal)
library(shiny)
library(thematic)
library(tidyverse)
read_rds("census team data/Bike Routes/bikeRouteDataFort.RDS")
bikRouteDataFort <- read_rds("census team data/Bike Routes/bikeRouteDataFort.RDS")
roadsDataChi <- read_rds("census team data/Bike Routes/roadsDataChi.RDS")
runApp('app')
bikeRouteDataFort <- read_rds("census team data/Bike Routes/bikeRouteDataFort.RDS")
map <- ggplot() +
geom_path(data = roadsDataChi,
aes(x = long, y = lat, group = group),
color = "red") +
geom_path(data = bikeRouteDataFort,
aes(x = long, y = lat, group = group),
color = "green")  +
theme_void() +
theme(title = element_text("Bike routes + roads in Chicago", color = "white", size = 20))
map
ggplot() +
geom_path(data = roadsDataChi,
aes(x = long, y = lat, group = group),
color = "red") +
geom_path(data = bikeRouteDataFort,
aes(x = long, y = lat, group = group),
color = "green")  +
theme_void() +
theme(title = element_text("Bike routes + roads in Chicago", color = "white", size = 20))
bikeRouteDataFort <- read_rds("census team data/Bike Routes/bikeRouteDataFort.RDS")
bikeRouteDataFort <- read_rds("app/census team data/Bike Routes/bikeRouteDataFort.RDS")
roadsDataChi <- read_rds("app/census team data/Bike Routes/roadsDataChi.RDS")
ggplot() +
geom_path(data = roadsDataChi,
aes(x = long, y = lat, group = group),
color = "red") +
geom_path(data = bikeRouteDataFort,
aes(x = long, y = lat, group = group),
color = "green")  +
theme_void() +
theme(title = element_text("Bike routes + roads in Chicago", color = "white", size = 20))
map <- ggplot() +
geom_path(data = roadsDataChi,
aes(x = long, y = lat, group = group),
color = "red") +
geom_path(data = bikeRouteDataFort,
aes(x = long, y = lat, group = group),
color = "green")  +
theme_void() +
theme(title = element_text("Bike routes + roads in Chicago", color = "red", size = 20))
map
ggplot() +
geom_path(data = roadsDataChi,
aes(x = long, y = lat, group = group),
color = "red") +
geom_path(data = bikeRouteDataFort,
aes(x = long, y = lat, group = group),
color = "green")  +
theme(title = element_text("Bike routes + roads in Chicago", color = "red", size = 20))
map <- ggplot() +
geom_path(data = roadsDataChi,
aes(x = long, y = lat, group = group),
color = "red") +
geom_path(data = bikeRouteDataFort,
aes(x = long, y = lat, group = group),
color = "green")  +
theme_void() +
theme(title = element_text("Bike routes + roads in Chicago", color = "red", size = 20))
map
theme <- bslib::bs_theme(
bg = "#0b3d91",
fg = "white",
base_font = "Source Sans Pro"
)
bslib::bs_theme_preview(theme)
## SHINY APP THEME
library(bslib)
library(dplyr)
library(extrafont)
library(ggplot2)
## SHINY APP THEME
library(bslib)
library(extrafont)
library(janitor)
library(shiny)
library(showtext)
library(thematic)
library(tidyverse)
library(ggplot2)
library(dplyr)
divvytheme <- theme_minimal() +
theme(text = element_text(family = "Maven Pro", face = "bold"), axis.text = element_text(color = "#5FB3E0"))
divvycolors <- c("#5FB3E0", "#C5D0D9", "#A2A6F2")
source('app/shiny-run.R')
runApp('app')
theme <- bs_theme(
bg = "#5FB3E0", fg = "#C5D0D9", primary = "#A2A6F2",
base_font = font_google("Space Mono"),
code_font = font_google("Space Mono")
)
bslib::bs_theme_preview(theme)
theme <- bs_theme(
bg = "#5FB3E0", fg = "#A2A6F2", primary = "#C5D0D9",
base_font = font_google("Space Mono"),
code_font = font_google("Space Mono")
)
bslib::bs_theme_preview(theme)
theme <- bs_theme(
fg = "#5FB3E0", bg = "#A2A6F2", primary = "#C5D0D9",
base_font = font_google("Space Mono"),
code_font = font_google("Space Mono")
)
bslib::bs_theme_preview(theme)
theme <- bs_theme(
fg = "#5FB3E0", primary = "#A2A6F2", bg = "#C5D0D9",
base_font = font_google("Space Mono"),
code_font = font_google("Space Mono")
)
bslib::bs_theme_preview(theme)
theme <- bs_theme(
fg = "#5FB3E0", primary = "black", bg = "#C5D0D9",
base_font = font_google("Space Mono"),
code_font = font_google("Space Mono")
)
bslib::bs_theme_preview(theme)
theme <- bs_theme(
fg = "#EDFFF6", bg = "#BEEE6D3", primary = "#B4D9C7", secondary = "#9FBFB0"
)
bslib::bs_theme_preview(theme)
theme <- bs_theme(
fg = "#EDFFF6", bg = "#BEEE6D3", primary = "#B4D9C7", secondary = "#9FBFB0"
)
bslib::bs_theme_preview(theme)
theme <- bs_theme(
fg = "#EDFFF6", bg = "#BEEE6D3", primary = "#B4D9C7", secondary = "#7F998C"
)
bslib::bs_theme_preview(theme)
divvytheme <- bslib::bs_theme(
bg = "#0b3d91",
fg = "white",
base_font = "Source Sans Pro"
)
bslib::bs_theme_preview(theme)
divvytheme <- bslib::bs_theme(
bg = "white",
fg = "black",
base_font = "Source Sans Pro"
)
bslib::bs_theme_preview(theme)
bslib::bs_theme_preview(divvytheme)
divvytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
base_font = "Source Sans Pro"
)
bslib::bs_theme_preview(divvytheme)
divvytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#5FB3E0"
base_font = "Source Sans Pro"
)
divvytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#5FB3E0",
base_font = "Source Sans Pro"
)
bslib::bs_theme_preview(divvytheme)
divvytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#5FB3E0",
secondary = "#A2A6F2",
base_font = "Source Sans Pro"
)
bslib::bs_theme_preview(divvytheme)
divvytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#5FB3E0",
secondary = "#A2A6F2",
base_font = "Maven Pro"
)
bslib::bs_theme_preview(divvytheme)
divvytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#5FB3E0",
secondary = "#A2A6F2",
base_font = font_google("Maven Pro")
)
bslib::bs_theme_preview(divvytheme)
divvytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#5FB3E0",
secondary = "#A2A6F2",
base_font = font_google("Maven Pro"),
heading_font = font_google("Maven Pro", face = "bold")
)
bslib::bs_theme_preview(divvytheme)
equiticitytheme <- bslib::bs_theme(
bg = "#668C7A",
fg = "#6BA033",
primary = "#8C5F58",
secondary = "#A2A6F2",
base_font = font_google("Arial"),
heading_font = font_google("Arial")
)
bslib::bs_theme_preview(equiticitytheme)
equiticitytheme <- bslib::bs_theme(
bg = "#668C7A",
fg = "#6BA033",
primary = "#8C5F58",
secondary = "#A2A6F2",
base_font = font_google("Arial"),
heading_font = font_google("Arial")
)
equiticitytheme <- bslib::bs_theme(
bg = "#668C7A",
fg = "#6BA033",
primary = "#8C5F58",
secondary = "#A2A6F2",
base_font = font_google("Arial"),
heading_font = font_google("Arial")
)
bslib::bs_theme_preview(equiticitytheme)
equiticitytheme <- bslib::bs_theme(
bg = "#668C7A",
fg = "#6BA033",
primary = "#8C5F58",
secondary = "#A2A6F2"
)
bslib::bs_theme_preview(equiticitytheme)
equiticitytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#668C7A",
success = "#6BA033",
info = "#8C5F58",
warning = "#A2A6F2"
)
bslib::bs_theme_preview(equiticitytheme)
theme <- bs_theme(
fg = "#EDFFF6", bg = "#BEE6D3", primary = "#B4D9C7", secondary = "#7F998C"
)
bs_theme_preview(theme)
equiticitytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#668C7A",
success = "#6BA033",
info = "#8C5F58",
warning = "#A2A6F2",
danger = "#668C7A"
)
bslib::bs_theme_preview(equiticitytheme)
equiticitytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#668C7A",
secondary = "8C5F58",
success = "#6BA033",
info = "#EDFFF6",
warning = "#B4D9C7",
danger = "#668C7A"
)
bslib::bs_theme_preview(equiticitytheme)
equiticitytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#668C7A",
secondary = "8C5F58",
success = "#6BA033",
info = "#EDFFF6",
warning = "#B4D9C7",
danger = "#668C7A"
)
bslib::bs_theme_preview(equiticitytheme)
equiticitytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#668C7A",
secondary = "#8C5F58",
success = "#6BA033",
info = "#EDFFF6",
warning = "#B4D9C7",
danger = "#668C7A"
)
bslib::bs_theme_preview(equiticitytheme)
#### DIVVY THEME ####
divvytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#5FB3E0",
secondary = "#A2A6F2",
base_font = font_google("Maven Pro"),
heading_font = font_google("Maven Pro")
)
## SHINY APP THEME
library(bslib)
library(dplyr)
library(extrafont)
library(ggplot2)
library(janitor)
library(shiny)
library(showtext)
library(thematic)
library(tidyverse)
#### DIVVY THEME ####
divvytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#5FB3E0",
secondary = "#A2A6F2",
base_font = font_google("Maven Pro"),
heading_font = font_google("Maven Pro")
)
bslib::bs_theme_preview(divvytheme)
#### EQUITICITY THEME ####
equiticitytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#668C7A",
secondary = "#8C5F58",
success = "#6BA033",
info = "#EDFFF6",
warning = "#B4D9C7",
danger = "#7F998C"
)
bslib::bs_theme_preview(equiticitytheme)
#### EQUITICITY THEME ####
equiticitytheme <- bslib::bs_theme(
bg = "#FFFFFF",
fg = "#000000",
primary = "#668C7A",
secondary = "#8C5F58",
success = "#6BA033",
info = "#EDFFF6",
warning = "#B4D9C7",
danger = "#7F998C"
)
runApp('app')
runApp()
runApp('app')
runApp()
runApp('app')
knitr::opts_chunk$set(echo = TRUE)
divhist  <- readxl::read_xlsx("divvy_individual_rides_first50rows.xlsx") %>% clean_names()
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) + geom_point() + labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") + divvycolortheme
# creating custom divvy theme
divvytheme <- theme_minimal() +
theme(text = element_text(family = "Maven Pro", face = "bold"), axis.text = element_text(color = "#5FB3E0"))
divvycolors <- c("#5FB3E0", "#C5D0D9", "#A2A6F2")
divvycolortheme <- list(divvytheme, scale_color_manual(values = divvycolors))
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) + geom_point() + labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") + divvycolortheme
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
divvycolortheme
mtcars
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
divvycolortheme
ggplot(data = divhist, aes(x = total_docks, y = percent_full)) +
geom_point(color = "#A2A6F2") + labs(x = "Total Docks", y = "Percent Full", title = "Divvy Bikes Divvy Theme") + divvytheme
View(divhist)
divhist  <- readxl::read_xlsx("divvy_historical_first50rows - Mimi Wang.xlsx") %>% clean_names()
# creating custom divvy theme
divvytheme <- theme_minimal() +
theme(text = element_text(family = "Maven Pro", face = "bold"), axis.text = element_text(color = "#5FB3E0"))
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
divvycolortheme
ggplot(data = divhist, aes(x = total_docks, y = percent_full)) +
geom_point(color = "#A2A6F2") + labs(x = "Total Docks", y = "Percent Full", title = "Divvy Bikes Divvy Theme") + divvytheme
View(divhist)
# divvy theme
library(extrafont)
library(showtext)
library(ggplot2)
library(tidyverse)
library(janitor)
divhist  <- readxl::read_xlsx("divvy_historical_first50rows - Mimi Wang.xlsx") %>% clean_names()
# creating custom divvy theme
divvytheme <- theme_minimal() +
theme(text = element_text(family = "Maven Pro", face = "bold"), axis.text = element_text(color = "#5FB3E0"))
divvycolortheme <- list(divvytheme, scale_color_manual(values = divvycolors))
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
divvycolortheme
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
divvycolortheme
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data")
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
scale_color_manual(c("#5FB3E0", "#C5D0D9", "#A2A6F2"))
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
scale_color_manual(values = c("#5FB3E0", "#C5D0D9", "#A2A6F2"))
ggplot(data = divhist, aes(x = total_docks, y = percent_full)) +
geom_point(color = "#A2A6F2") + labs(x = "Total Docks", y = "Percent Full", title = "Divvy Bikes Divvy Theme") + divvytheme
ggplot(data = divhist, aes(x = total_docks, y = percent_full)) +
geom_point(color = "#A2A6F2") + labs(x = "Total Docks", y = "Percent Full", title = "Divvy Bikes Divvy Theme") +  theme_minimal() +
theme(text = element_text(family = "Maven Pro", face = "bold"), axis.text = element_text(color = "#5FB3E0"))
ggplot(data = divhist, aes(x = total_docks, y = percent_full)) +
geom_point(color = "#A2A6F2") + labs(x = "Total Docks", y = "Percent Full", title = "Divvy Bikes Divvy Theme") +  theme_minimal()
runApp('app')
View(divhist)
runApp('app')
shp <- readOGR(dsn = "Boundaries - Community Areas (current) (1)/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR(dsn = "geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
library(rgdal)
shp <- readOGR(dsn = "Boundaries - Community Areas (current) (1)/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR(dsn = "geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR("geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
runApp('app')
readOGR("geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR("geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
library(rgdal)
shp <- readOGR("geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR("data/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
file.exists("data/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR(dsn = "data/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp", layer = "geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR(dsn = "data/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
ggplot(data = divhist, aes(x = total_docks, y = percent_full)) +
geom_point(color = "#A2A6F2") + labs(x = "Total Docks", y = "Percent Full", title = "Divvy Bikes Divvy Theme") + theme_minimal()
readRDS("combined_community_with_map.rds")
combined_community_with_map <- readRDS("~/Desktop/winter 2022/STAT 359/equiticity-viz-and-comm/combined_community_with_map.rds")
View(combined_community_with_map)
shiny::runApp('app')
runApp('app')
#make sure you have the divvy trips data setup
Divvy_Trips_2020_Q1_data <- read_csv("app/census team data/Divvy_Trips_2020_Q1_data.csv")
#charting Divvy membership status by Starting station
#this graph is pretty ugly so yeah
members_by_station <- Divvy_Trips_2020_Q1_data %>%
group_by(start_station_name) %>%
mutate(rides = n())
#there is something fishy going on with HQ QR - it's a clear outlier
HQ <- Divvy_Trips_2020_Q1_data %>%
filter(start_station_name == "HQ QR")
#there's a lot of funkiness here! negative time, lots of rides...
HQ <- HQ %>%
mutate(difference_time = difftime(ended_at, started_at)) %>%
arrange(desc(difference_time))
#getting top 50, split by member status, starting station, and ending station
station_summary <- Divvy_Trips_2020_Q1_data %>%
group_by(start_station_name, end_station_name, member_casual) %>%
summarize(rides = n()) %>%
#the top_n is a little funky with all the different groupings, I don't think it's actually working
#top_n(50) %>%
arrange(desc(rides))
#a very bad graph of station popularity by member/casual
ggplot(members_by_station, aes(start_station_name)) +
geom_bar() +
facet_wrap(~ member_casual)
