divvycolortheme <- list(divvytheme, scale_color_manual(values = divvycolors))
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
divvycolortheme
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
divvycolortheme
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data")
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
scale_color_manual(c("#5FB3E0", "#C5D0D9", "#A2A6F2"))
ggplot(data = mtcars, aes(x = mpg, y = disp, color = factor(cyl))) +
geom_point() +
labs(x = "MPG", y = "Display", title = "Divvy Sample with other data") +
scale_color_manual(values = c("#5FB3E0", "#C5D0D9", "#A2A6F2"))
ggplot(data = divhist, aes(x = total_docks, y = percent_full)) +
geom_point(color = "#A2A6F2") + labs(x = "Total Docks", y = "Percent Full", title = "Divvy Bikes Divvy Theme") + divvytheme
ggplot(data = divhist, aes(x = total_docks, y = percent_full)) +
geom_point(color = "#A2A6F2") + labs(x = "Total Docks", y = "Percent Full", title = "Divvy Bikes Divvy Theme") +  theme_minimal() +
theme(text = element_text(family = "Maven Pro", face = "bold"), axis.text = element_text(color = "#5FB3E0"))
ggplot(data = divhist, aes(x = total_docks, y = percent_full)) +
geom_point(color = "#A2A6F2") + labs(x = "Total Docks", y = "Percent Full", title = "Divvy Bikes Divvy Theme") +  theme_minimal()
runApp('app')
View(divhist)
runApp('app')
shp <- readOGR(dsn = "Boundaries - Community Areas (current) (1)/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR(dsn = "geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
library(rgdal)
shp <- readOGR(dsn = "Boundaries - Community Areas (current) (1)/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR(dsn = "geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR("geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
runApp('app')
readOGR("geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR("geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
library(rgdal)
shp <- readOGR("geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR("data/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
file.exists("data/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR(dsn = "data/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp", layer = "geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
shp <- readOGR(dsn = "data/geo_export_ffbe343c-781b-4dd4-909e-612bd86b9622.shp")
ggplot(data = divhist, aes(x = total_docks, y = percent_full)) +
geom_point(color = "#A2A6F2") + labs(x = "Total Docks", y = "Percent Full", title = "Divvy Bikes Divvy Theme") + theme_minimal()
readRDS("combined_community_with_map.rds")
combined_community_with_map <- readRDS("~/Desktop/winter 2022/STAT 359/equiticity-viz-and-comm/combined_community_with_map.rds")
View(combined_community_with_map)
shiny::runApp('app')
runApp('app')
#make sure you have the divvy trips data setup
Divvy_Trips_2020_Q1_data <- read_csv("app/census team data/Divvy_Trips_2020_Q1_data.csv")
#charting Divvy membership status by Starting station
#this graph is pretty ugly so yeah
members_by_station <- Divvy_Trips_2020_Q1_data %>%
group_by(start_station_name) %>%
mutate(rides = n())
#there is something fishy going on with HQ QR - it's a clear outlier
HQ <- Divvy_Trips_2020_Q1_data %>%
filter(start_station_name == "HQ QR")
#there's a lot of funkiness here! negative time, lots of rides...
HQ <- HQ %>%
mutate(difference_time = difftime(ended_at, started_at)) %>%
arrange(desc(difference_time))
#getting top 50, split by member status, starting station, and ending station
station_summary <- Divvy_Trips_2020_Q1_data %>%
group_by(start_station_name, end_station_name, member_casual) %>%
summarize(rides = n()) %>%
#the top_n is a little funky with all the different groupings, I don't think it's actually working
#top_n(50) %>%
arrange(desc(rides))
#a very bad graph of station popularity by member/casual
ggplot(members_by_station, aes(start_station_name)) +
geom_bar() +
facet_wrap(~ member_casual)
combined_community_with_map <- readRDS("~/Desktop/winter 2022/STAT 359/equiticity-viz-and-comm/combined_community_with_map.rds")
read_rds("combined_community_with_map.rds")
library(broom)
library(bslib)
library(dplyr)
library(ggplot2)
library(rgdal)
library(shiny)
library(thematic)
library(tidyverse)
read_rds("combined_community_with_map.rds")
readRDS("combined_community_with_map.rds")
combined_community_with_map$neighborhood
runApp('app')
combined_community_with_map %>% skim_without_charts()
library(skimr)
combined_community_with_map %>% skim_without_charts()
readxl::read_xlsx("combined_data_sans_geometry.xlsx")
dat <- readxl::read_xlsx("combined_data_sans_geometry.xlsx")
ggplot(dat) +
geom_sf(aes(fill = black_perc)) +
coord_sf() +
scale_fill_viridis_c() +
theme_classic() +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank()) +
labs(fill = "% Black")
library(tidyverse)
library(rgeos)
library(sp)
library(rgdal)
library(magrittr)
library(raster)
library(sf)
ggplot(dat) +
geom_sf(aes(fill = black_perc)) +
coord_sf() +
scale_fill_viridis_c() +
theme_classic() +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank()) +
labs(fill = "% Black")
ggplot(dat) +
geom_sf(aes(fill = black_perc)) +
geom_point(data = bike_loc, aes(x = Longitude, y = Latitude), alpha = .2, color = "red") +
coord_sf() +
scale_fill_viridis_c() +
theme_classic() +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank()) +
labs(fill = "% Black")
neighborhood_map <- read_sf("neighborhoods/geo_export_9c969155-1ad2-4497-b263-d7a54abec1f1.shp")
test_data <- read_xlsx("data/divvy_historical_first50rows - Mimi Wang.xlsx")
library(readxl)
test_data <- read_xlsx("data/divvy_historical_first50rows - Mimi Wang.xlsx")
neighborhood_map <- read_sf("neighborhoods/geo_export_9c969155-1ad2-4497-b263-d7a54abec1f1.shp")
test_data_sf <- st_as_sf(test_data, coords = c('Longitude', 'Latitude'), crs = st_crs(neighborhood_map))
test_data <- test_data_sf %>%
mutate(intersection = as.integer(st_intersects(geometry, neighborhood_map)),
neighborhood = if_else(is.na(intersection), '', neighborhood_map$community[intersection]))
test_data_done <- tibble(test_data)
test_data_done
View(neighborhood_map)
ggplot(neighborhoods) +
geom_sf() +
geom_point(data = bike_loc, aes(x = Longitude, y = Latitude), alpha = .2, color = "red") +
coord_sf() +
scale_fill_viridis_c() +
theme_classic() +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank()) +
labs(fill = "% Black")
ggplot(neighborhood_map) +
geom_sf() +
geom_point(data = bike_loc, aes(x = Longitude, y = Latitude), alpha = .2, color = "red") +
coord_sf() +
scale_fill_viridis_c() +
theme_classic() +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank()) +
labs(fill = "% Black")
ggplot(neighborhood_map) +
geom_sf() +
geom_point(aes(x = Longitude, y = Latitude), alpha = .2, color = "red") +
coord_sf() +
scale_fill_viridis_c() +
theme_classic() +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank()) +
labs(fill = "% Black")
ggplot(neighborhood_map) +
geom_sf() +
coord_sf()
runApp('app')
View(neighborhood_map)
runApp('app')
neighborhood_map %>%
filter(community == "LINCOLN SQUARE") %>%
ggplot() +
geom_sf() +
coord_sf()
neighborhood_map %>%
filter(community == "ROGERS PARK") %>%
ggplot() +
geom_sf() +
coord_sf()
runApp('app')
neighborhood_map %>%
filter(community == "ROGERS PARK") %>%
ggplot() +
geom_sf(aes(color = "red")) +
coord_sf()
ggplot(neighborhood_map) +
geom_sf() +
coord_sf()
neighborhood_map %>%
filter(community == "ROGERS PARK") %>%
ggplot() +
geom_sf(aes(color = "red"))
neighborhood_map %>%
ggplot() +
geom_sf(data = (neighborhood_map %>%
filter(community == "ROGERS PARK")),
aes(color = "red"))
neighborhood_map %>%
ggplot() +
geom_sf() +
geom_sf(data = (neighborhood_map %>%
filter(community == "ROGERS PARK")),
aes(color = "red"))
neighborhood_map %>%
ggplot() +
geom_sf() +
geom_sf(data = (neighborhood_map %>%
filter(community == "ROGERS PARK")),
aes(color = "red", fill = "red"))
neighborhood_map %>%
ggplot() +
geom_sf() +
geom_sf(data = (neighborhood_map %>%
filter(community == "ROGERS PARK")),
aes(color = "red", fill = "red")) +
theme_void()
neighborhood_map %>%
ggplot() +
geom_sf() +
geom_sf(data = (neighborhood_map %>%
filter(community == "ROGERS PARK")),
aes(color = "red", fill = "red")) +
theme_void() +
theme(legend.position = "none")
neighborhood_map %>%
ggplot() +
geom_sf() +
geom_sf(data = (neighborhood_map %>%
filter(community == "ROGERS PARK")),
aes(color = "red", fill = "red")) +
theme_void() +
theme(legend.position = "none")
install.packages("leaflet")
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
View(combined_community_with_map)
test_data <- read_xlsx("data/divvy_historical_first50rows - Mimi Wang.xlsx")
View(test_data)
test_data %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=Longitude, lat=Latitude, popup="The birthplace of R")
test_data %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=Longitude[1], lat=Latitude[1], popup="The birthplace of R")
test_data %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test_data$Longitude[1], lat=Latitude[1], popup="The birthplace of R")
test_data %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test_data$Longitude[1], lat=test_data$Latitude[1], popup="The birthplace of R")
test_data %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test_data$Longitude[1], lat=test_data$Latitude[1],
popup=test_data$`Total Docks`)
test_data %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test_data$Longitude[1], lat=test_data$Latitude[1],
popup="test_data$`Total Docks`")
test_data %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test_data$Longitude[1], lat=test_data$Latitude[1],
popup=test_data$Address)
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
test_data %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test_data$Longitude[1], lat=test_data$Latitude[1],
popup=content)
crimes_type %>%
ggplot() +
geom_sf(mapping = aes(geometry = geometry, fill = primary_type)) +
geom_sf(data = bike_routes, mapping = aes(geometry = geometry)) +
theme_void()
# libraries
library(tidyverse)
library(sf)
library(readxl)
library(viridis)
# datasets I analyzed
crimes <- read_csv('data/crimes_2021.csv')
census <- read_excel('data/neighborhood_info.xlsx')
# adjusting census data so it can be joined
census <- census %>%
mutate(neighborhood = tolower(neighborhood)) %>%
rename(community = neighborhood)
# map data from Chicago Data Portal
communities <- read_sf('data/communities/geo_export_45d4da8d-3fc8-4ccb-9b0c-8f546d526c9a.shp')
bike_routes <- read_sf('data/bikes/geo_export_02f6b9aa-6d14-4951-9963-31aeaa95c2b8.shp')
# changing communities ID variable so I can join it with crimes
communities <- communities %>%
mutate(area_numbe = as.numeric(area_numbe))
# number of crimes per community area
crimes_count <- crimes %>%
group_by(community_area) %>%
summarise(num_crimes = n()) %>%
left_join(communities, by = c('community_area' = 'area_numbe'))
# proportion of crimes that are committed on/near a street (as indicated by the location being street, alley, sidewalk or highway) out of all crimes in the community
crimes_street <- crimes %>%
mutate(location_description = if_else(location_description %in% c('street', 'alley', 'sidewalk', 'highway / expressway'), "street", "non_street")) %>%
group_by(community_area, location_description) %>%
summarise(num_crimes = n()) %>%
pivot_wider(names_from = location_description, values_from = num_crimes) %>%
mutate(street_prop = street / (street + non_street)) %>%
left_join(communities, by = c('community_area' = 'area_numbe'))
# most frequent type of crime committed in each community area
crimes_type <- crimes %>%
group_by(community_area, primary_type) %>%
summarise(num_crimes = n()) %>%
filter(num_crimes == max(num_crimes)) %>%
left_join(communities, by = c('community_area' = 'area_numbe'))
# proportion arrested for their crime by community area
crimes_arrest <- crimes %>%
group_by(community_area) %>%
summarise(prop_arrest = mean(arrest)) %>%
left_join(communities, by = c('community_area' = 'area_numbe'))
crimes_type %>%
ggplot() +
geom_sf(mapping = aes(geometry = geometry, fill = primary_type)) +
geom_sf(data = bike_routes, mapping = aes(geometry = geometry)) +
theme_void()
crimes_street %>%
ggplot() +
geom_sf(mapping = aes(geometry = geometry, fill = street_prop)) +
geom_sf(data = bike_routes) +
theme_void() +
scale_fill_viridis()
runApp('app')
runApp()
source("~/.active-rstudio-document", echo=TRUE)
runApp()
library(viridis)
# datasets I analyzed
crimes <- read_csv('data/violence_enforcement/crimes_2021.csv')
census <- read_excel('data/violence_enforcement/neighborhood_info.xlsx')
# adjusting census data so it can be joined
census <- census %>%
mutate(neighborhood = tolower(neighborhood)) %>%
rename(community = neighborhood)
# map data from Chicago Data Portal
communities <- read_sf('data/violence_enforcement/communities/geo_export_45d4da8d-3fc8-4ccb-9b0c-8f546d526c9a.shp')
bike_routes <- read_sf('data/violence_enforcement/bikes/geo_export_02f6b9aa-6d14-4951-9963-31aeaa95c2b8.shp')
# changing communities ID variable so I can join it with crimes
communities <- communities %>%
mutate(area_numbe = as.numeric(area_numbe))
# number of crimes per community area
crimes_count <- crimes %>%
group_by(community_area) %>%
summarise(num_crimes = n()) %>%
left_join(communities, by = c('community_area' = 'area_numbe'))
# proportion of crimes that are committed on/near a street (as indicated by the location being street, alley, sidewalk or highway) out of all crimes in the community
crimes_street <- crimes %>%
mutate(location_description = if_else(location_description %in% c('street', 'alley', 'sidewalk', 'highway / expressway'), "street", "non_street")) %>%
group_by(community_area, location_description) %>%
summarise(num_crimes = n()) %>%
pivot_wider(names_from = location_description, values_from = num_crimes) %>%
mutate(street_prop = street / (street + non_street)) %>%
left_join(communities, by = c('community_area' = 'area_numbe'))
# most frequent type of crime committed in each community area
crimes_type <- crimes %>%
group_by(community_area, primary_type) %>%
summarise(num_crimes = n()) %>%
filter(num_crimes == max(num_crimes)) %>%
left_join(communities, by = c('community_area' = 'area_numbe'))
# proportion arrested for their crime by community area
crimes_arrest <- crimes %>%
group_by(community_area) %>%
summarise(prop_arrest = mean(arrest)) %>%
left_join(communities, by = c('community_area' = 'area_numbe'))
crimes_type %>%
ggplot() +
geom_sf(mapping = aes(geometry = geometry, fill = primary_type)) +
geom_sf(data = bike_routes, mapping = aes(geometry = geometry)) +
theme_void()
Battery is a much more violent crime than theft, so the communities with battery as the top crime are likely more dangerous and less bikeable than communities with theft as the top crime. The bike lanes seem to confirm this trend, as there is a concentration of bike lanes in the communities with theft as the main crime and fewer in communities with battery as the main crime
crimes_street %>%
ggplot() +
geom_sf(mapping = aes(geometry = geometry, fill = street_prop)) +
geom_sf(data = bike_routes) +
theme_void() +
scale_fill_viridis()
The relationship is less obvious here so you might not want to use it, but there still definitely seems to be a higher concentration of Divvy bike lanes in communities with a smaller proportion of street crime, and those areas seem to line up with communities that have battery as their main crime.
crimes_arrest %>%
ggplot() +
geom_sf(mapping = aes(geometry = geometry, fill = prop_arrest)) +
geom_sf(data = bike_routes) +
theme_void() +
scale_fill_viridis()
runApp()
source("~/.active-rstudio-document", echo=TRUE)
runApp()
test <- fluidPage(
titlePanel("HELP"),
selectInput("community_area", "Select community area", neighborhood_map$community),
dateRangeInput("dates", label = h3("Date range")),
hr(),
fluidRow(column(4, verbatimTextOutput("value")))
)
source("~/.active-rstudio-document", echo=TRUE)
mapUI <- function(){ggplot() +
geom_path(data = roadsDataChi,
aes(x = long, y = lat, group = group)) +
geom_path(data = bikeRouteDataFort,
aes(x = long, y = lat, group = group))  +
theme_void() +
labs(title = "Bike routes + roads in Chicago") +
theme(title = element_text())}
mapUI()
roadsDataChi <- read_rds("data/census/Bike Routes/roadsDataChi.RDS")
bikeRouteDataFort <- read_rds("data/census/Bike Routes/bikeRouteDataFort.RDS")
mapUI <- function(){ggplot() +
geom_path(data = roadsDataChi,
aes(x = long, y = lat, group = group)) +
geom_path(data = bikeRouteDataFort,
aes(x = long, y = lat, group = group))  +
theme_void() +
labs(title = "Bike routes + roads in Chicago") +
theme(title = element_text())}
mapUI()
runApp()
mapUI <- function(id){ggplot() +
geom_path(data = roadsDataChi,
aes(x = long, y = lat, group = group)) +
geom_path(data = bikeRouteDataFort,
aes(x = long, y = lat, group = group))  +
theme_void() +
labs(title = "Bike routes + roads in Chicago") +
theme(title = element_text())}
mapUI()
runApp()
moduleServer(id, function(input, output, session) {
output$plot <- renderPlot({
ggplot() +
geom_path(data = roadsDataChi,
aes(x = long, y = lat, group = group)) +
geom_path(data = bikeRouteDataFort,
aes(x = long, y = lat, group = group))  +
theme_void() +
labs(title = "Bike routes + roads in Chicago") +
theme(title = element_text())
})
crimes_census %>%
ggplot() +
geom_sf(mapping = aes(geometry = geometry, fill = divvy_to_pop)) +
geom_point(mapping = aes(x = lat, y = long, size = crime_rate), color = "red", alpha = 0.5) +
theme_void() +
scale_fill_viridis()
# proportion arrested for their crime by community area
crimes_arrest <- crimes %>%
group_by(community_area) %>%
summarise(prop_arrest = mean(arrest)) %>%
left_join(communities, by = c('community_area' = 'area_numbe'))
crimes_type %>%
ggplot() +
geom_sf(mapping = aes(geometry = geometry, fill = primary_type)) +
geom_sf(data = bike_routes, mapping = aes(geometry = geometry)) +
theme_void()
crimes_type %>%
ggplot() +
geom_sf(mapping = aes(geometry = geometry)) +
geom_sf(data = bike_routes, mapping = aes(geometry = geometry)) +
theme_void()
crimes_type %>%
ggplot() +
geom_sf(mapping = aes(geometry = geometry, fill = primary_type)) +
geom_sf(data = bike_routes, mapping = aes(geometry = geometry)) +
theme_void()
crimes_type
mapUI <- function(id){}
mapUI()
crimes_type
crimes_type %>%
select(community == community) %>%
select(crimes_type$primary_type)
crimes_type %>%
select(community == id) %>%
select(crimes_type$primary_type)
crimes_type %>%
select(crimes_type$community == id) %>%
select(crimes_type$primary_type)
crimes_type %>%
filter(crimes_type$community == id) %>%
select(crimes_type$primary_type)
crimes_type %>%
filter(crimes_type$community == id) %>%
print(crimes_type$primary_type)
crimes_type %>%
filter(crimes_type$community == id)
crimes_type %>%
filter(community == id)
