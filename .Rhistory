stations_rollout <- readRDS("data/stations_rollout.RDS")
communities <- readRDS("data/communities.RDS")
stations_rollout_ridge <- read_excel("drafting visualizations/vis_1/Full Network to Date Station Install Dates - 2_1_22.xlsx") %>%
janitor::clean_names() %>%
mutate(
community = (community_area %>% str_to_title()),
station = name,
rollout_year = format(as.Date(install_date, format="%Y/%m/%d"),"%Y", ),
rollout_month = format(as.Date(install_date, format="%Y/%m/%d"),"%m", )
) %>%
filter(!is.na(community)) %>%
left_join(communities, by = c("community" = "community")) %>%
# mutate(
#   rollout_year = factor(
#     x = rollout_year,
#     levels = c(2013, 2015, 2016, 2017, 2018, 2019, 2020, 2021)
#   )
# ) %>%
select(station, community, region, rollout_year)
stations_rollout_ridge %>%
filter(community == "McKinley Park")
stations_rollout_ridge[stations_rollout_ridge$community == "Mckinley Park", "community"] <- "McKinley Park"
stations_rollout_ridge %>%
filter(community == "McKinley Park")
stations_rollout_ridge %>%
group_by(region, rollout_year) %>%
summarise(new_stations = n()) %>% view()
stations_rollout_ridge <- read_excel("drafting visualizations/vis_1/Full Network to Date Station Install Dates - 2_1_22.xlsx") %>%
janitor::clean_names() %>%
mutate(
community = (community_area %>% str_to_title()),
station = name,
rollout_year = format(as.Date(install_date, format="%Y/%m/%d"),"%Y", ),
rollout_month = format(as.Date(install_date, format="%Y/%m/%d"),"%m", )
) %>%
filter(!is.na(community))
stations_rollout_ridge[stations_rollout_ridge$community == "Mckinley Park", "community"] <- "McKinley Park"
stations_rollout_ridge %>%
filter(community == "McKinley Park")
stations_rollout_ridge %>%
filter(community == "McKinley Park")
stations_rollout_ridge %>%
filter(community == "McKinley Park")
stations_rollout_ridge <- stations_rollout_ridge %>%
left_join(communities, by = c("community" = "community")) %>%
select(station, community, region, rollout_year)
stations_rollout_ridge
stations_rollout_ridge %>%
group_by(region, rollout_year) %>%
summarise(new_stations = n()) %>% view()
stations_rollout_ridge <- stations_rollout_ridge %>%
group_by(region, rollout_year) %>%
summarise(new_stations = n()) %>% view()
stations_rollout_ridge <- stations_rollout_ridge %>%
group_by(region, rollout_year) %>%
summarise(new_stations = n())
stations_rollout_ridge <- read_excel("drafting visualizations/vis_1/Full Network to Date Station Install Dates - 2_1_22.xlsx") %>%
janitor::clean_names() %>%
mutate(
community = (community_area %>% str_to_title()),
station = name,
rollout_year = format(as.Date(install_date, format="%Y/%m/%d"),"%Y", ),
rollout_month = format(as.Date(install_date, format="%Y/%m/%d"),"%m", )
) %>%
filter(!is.na(community))
stations_rollout_ridge[stations_rollout_ridge$community == "Mckinley Park", "community"] <- "McKinley Park"
stations_rollout_ridge <- stations_rollout_ridge %>%
left_join(communities, by = c("community" = "community")) %>%
select(station, community, region, rollout_year)
stations_rollout_ridge <- stations_rollout_ridge %>%
group_by(region, rollout_year) %>%
summarise(new_stations = n())
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region, fill = region)) +
geom_density_ridges() +
theme_ridges()
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region, fill = region)) +
geom_density_ridges() +
theme_ridges()
stations_rollout_ridge <- stations_rollout_ridge %>%
group_by(region, rollout_year) %>%
summarise(new_stations = n()) %>%
mutate(rollout_year = rollout_year %>% as.numeric())
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region, fill = region)) +
geom_density_ridges() +
theme_ridges()
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = -region, fill = region)) +
geom_density_ridges() +
theme_ridges()
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region, fill = region)) +
geom_density_ridges() +
theme_ridges()
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region, fill = region)) +
geom_density_ridges(alpha=0.6, stat="binline") +
theme_ridges()
stations_rollout_ridge
stations_rollout_ridge <- read_excel("drafting visualizations/vis_1/Full Network to Date Station Install Dates - 2_1_22.xlsx") %>%
janitor::clean_names() %>%
mutate(
community = (community_area %>% str_to_title()),
station = name,
rollout_year = format(as.Date(install_date, format="%Y/%m/%d"),"%Y", ),
rollout_month = format(as.Date(install_date, format="%Y/%m/%d"),"%m", )
) %>%
filter(!is.na(community))
stations_rollout_ridge[stations_rollout_ridge$community == "Mckinley Park", "community"] <- "McKinley Park"
stations_rollout_ridge <- stations_rollout_ridge %>%
left_join(communities, by = c("community" = "community")) %>%
select(station, community, region, rollout_year)
stations_rollout_ridge <- stations_rollout_ridge %>%
group_by(region, rollout_year) %>%
summarise(new_stations = n()) %>%
mutate(rollout_year = rollout_year %>% as.numeric())
stations_rollout_ridge
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region, fill = region)) +
geom_density_ridges(alpha=0.6, stat="binline") +
theme_ridges()
stations_rollout_ridge
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region, fill = new_stations)) +
geom_density_ridges(alpha=0.6, stat="binline") +
theme_ridges()
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = new_stations, fill = region)) +
geom_density_ridges(alpha=0.6, stat="binline") +
theme_ridges()
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region)) +
geom_density_ridges(alpha=0.6, stat="binline") +
theme_ridges()
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region)) +
geom_density_ridges() +
theme_ridges()
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region)) +
geom_density_ridges(aes(new_stations)) +
theme_ridges()
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region)) +
geom_density_ridges(stat = "binline") +
theme_ridges()
stations_rollout_ridge
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region)) +
geom_density_ridges() +
theme_ridges()
library(shiny); runApp('app/stations rollout app.R')
#### SET UP
# load packages
library(gganimate)
library(mapview)
library(RColorBrewer)
library(sf)
library(tidyverse)
library(viridis)
mapviewOptions(fgb = FALSE)
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS")
communities <- readRDS("data/communities.RDS")
# ridgeline plot
library(ggridges)
library(readxl)
stations_rollout_ridge <- read_excel("drafting visualizations/vis_1/Full Network to Date Station Install Dates - 2_1_22.xlsx") %>%
janitor::clean_names() %>%
mutate(
community = (community_area %>% str_to_title()),
station = name,
rollout_year = format(as.Date(install_date, format="%Y/%m/%d"),"%Y", ),
rollout_month = format(as.Date(install_date, format="%Y/%m/%d"),"%m", )
) %>%
filter(!is.na(community))
stations_rollout_ridge[stations_rollout_ridge$community == "Mckinley Park", "community"] <- "McKinley Park"
stations_rollout_ridge <- stations_rollout_ridge %>%
left_join(communities, by = c("community" = "community")) %>%
dplyr::select(station, community, region, rollout_year)
stations_rollout_ridge <- stations_rollout_ridge %>%
group_by(region, rollout_year) %>%
summarise(new_stations = n()) %>%
mutate(rollout_year = rollout_year %>% as.numeric())
ggplot(stations_rollout_ridge, aes(x = rollout_year, y = region)) +
geom_density_ridges() +
theme_ridges()
library(shiny); runApp('app/stations rollout app.R')
stations_rollout
stations_rollout %>% filter(region == "Far Southwest Side")
# run app
shinyApp(ui = rollout_map_ui, server = rollout_map_server)
runApp('app/stations rollout app.R')
##################################################################
# define UI
rollout_map_ui <- fluidPage(
# app title
titlePanel("Divvy Stations Rollout"),
# select year
sidebarLayout(
sidebarPanel(
selectInput("year", "Year",
choices = c("All", levels(stations_rollout$rollout_year)),
selected = "All", multiple = TRUE
)
),
# show map
mainPanel(
mapviewOutput("map")
)
# generate map
(mapview(
communities,
zcol = "region"
) +
mapview(
filter_year,
xcol = "lon", ycol = "lat",
zcol = "rollout_year",
layer.name = "Year",
grid = FALSE
)
)@map
# output
output$map <- renderLeaflet({
# get data
filter_year <- map_year()
# generate map
(mapview(
communities,
zcol = "region"
) +
mapview(
filter_year,
xcol = "lon", ycol = "lat",
zcol = "rollout_year",
layer.name = "Year",
grid = FALSE
)
)@map
})
# define server
rollout_map_server <- function(input, output) {
# reactive input/output
map_year <- reactive({
filter_year <- stations_rollout
if(input$year != "All") filter_year <-
filter_year <- stations_rollout[stations_rollout$rollout_year == input$year, ]
filter_year
})
# output
output$map <- renderLeaflet({
# get data
filter_year <- map_year()
# generate map
(mapview(
communities,
zcol = "region"
) +
mapview(
filter_year,
xcol = "lon", ycol = "lat",
zcol = "rollout_year",
layer.name = "Year",
grid = FALSE
)
)@map
})
}
# run app
shinyApp(ui = rollout_map_ui, server = rollout_map_server)
mapview(
divvy_demographics,
zcol = "msh_index_score",
popup = popupGraph(income_plots))
divvy_demographics <- read_rds("data/divvy_demographics.RDS")
## income
income_distribution <- divvy_demographics %>%
pivot_longer(
c(inc_lt_25k, inc_25_50k, inc_50_75k, inc_75_100k, inc_100_150k, inc_gt_150k),
names_to = "income",
values_to = "count"
) %>%
mutate(
community = community %>% factor(),
community_id = community_id %>% factor()
) %>%
dplyr::select(community_id, community, region, income, count) %>%
st_drop_geometry() %>%
tibble()
income_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(income, count)) +
geom_col() +
labs(title = income_distribution$community[1])
income_plots <- list()
for(i in levels(income_distribution$community_id)){
plot <- income_distribution %>%
filter(community_id == i) %>%
ggplot(aes(income, count)) +
geom_col() +
labs(title = income_distribution$community[i])
income_plots[[i]] <- plot
}
mapview(
divvy_demographics,
zcol = "msh_index_score",
popup = popupGraph(income_plots))
library(leaflet)
library(leafpop)
library(mapview)
mapview(
divvy_demographics,
zcol = "msh_index_score",
popup = popupGraph(income_plots))
mapview(
divvy_demographics,
zcol = "msh_index_score",
popup = popupGraph(income_plots),
col.regions = -viridis
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = -viridis
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = -"viridis"
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = "viridis"
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = pal(viridis)
)
library(RColorBrewer)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = pal("RdPu")
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = palette("RdPu")
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = brewer.pal("RdPu")
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = brewer.pal(10"RdPu")
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = brewer.pal(10, "RdPu")
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = brewer.pal(6, "RdPu")
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = jazCup_pal()
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = jazzCup_pal()
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
#  popup = popupGraph(income_plots),
col.regions = brewer.pal(6, "Blues")
)
mapview(
divvy_demographics,
zcol = "msh_index_score",
popup = popupGraph(income_plots),
col.regions = brewer.pal(6, "Blues")
)
mapview(divvy_demographics, zcol = "prop_white", popup = popupGraph(race_plots), col.regions = brewer.pal(6, "Blues"))
## race
race_distribution <- divvy_demographics %>%
pivot_longer(
c(white, non_white),
names_to = "race",
values_to = "count"
) %>%
mutate(
community = community %>% factor(),
community_id = community_id %>% factor()
) %>%
dplyr::select(community_id, community, region, race, count) %>%
st_drop_geometry() %>%
tibble()
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(fill = race, x = community, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[1])
race_plots <- list()
for(i in levels(race_distribution$community_id)){
plot <- race_distribution %>%
filter(community_id == i) %>%
ggplot(aes(fill = race, x = community, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[i])
race_plots[[i]] <- plot
}
mapview(divvy_demographics, zcol = "prop_white", popup = popupGraph(race_plots), col.regions = brewer.pal(6, "Blues"))
runApp('app/stations rollout app.R')
source("~/Desktop/for jordi.R", echo=TRUE)
source("~/Desktop/current/winter 2022/STAT 359/equiticity-viz-and-comm/data cleaning scripts/stations_rollout.R", echo=TRUE)
runApp('app/stations rollout app.R')
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor(),
community = community %>% factor()
) %>%
mutate(region = fct_relevel(
region, "Far North Side", "Northwest Side", "North Side", "West Side", "Central",
"Southwest Side", "South Side", "Far Southwest Side", "Far Southeast Side")
)
communities <- readRDS("data/communities.RDS") %>%
mutate(region = fct_relevel(
region, "Far North Side", "Northwest Side", "North Side", "West Side", "Central",
"Southwest Side", "South Side", "Far Southwest Side", "Far Southeast Side")
)
runApp('app/stations rollout app.R')
communities <- readRDS("data/communities.RDS") %>%
mutate(region = fct_relevel(
region, "Far North Side", "Northwest Side", "North Side", "West Side", "Central",
"Southwest Side", "South Side", "Far Southwest Side", "Far Southeast Side")
)
runApp('app/stations rollout app.R')
bikes
View(bikes)
runApp('app/stations rollout app.R')
stations_rollout
stations_rollout_2013_2015 <- stations_rollout %>%
filter(rollout_year_binned == "2013-2015")
stations_rollout_2013_2015
stations_rollout
stations_rollout_2020_2021 <- stations_rollout %>%
filter(rollout_year_binned == "2020-2021")
map_2013_2015 <- mapview(stations_rollout_2013_2015, zcol = "region",
col.regions = RColorBrewer::brewer.pal(9, "Greens"), alpha.regions = 1,
layer.name = "Pct change 2010-2020"
)
map_2020_2021 <- mapview(stations_rollout_2020_2021, zcol = "region",
col.regions = RColorBrewer::brewer.pal(9, "Greens"), alpha.regions = 1,
layer.name = "Pct change 2000-2010"
)
library(leafsync)
sync(map_2013_2015, map_2020_2021)
mapview(
communities,
zcol = "region",
legend = FALSE,
col.regions = brewer.pal(9, "Greys")
) +
mapview(
rollout_regions,
zcol = "rollout_year_binned",
legend = TRUE,
layer.name = "Rollout year",
col.regions = brewer.pal(4,"RdPu"),
cex = 3
)
mapview(
communities,
zcol = "region",
legend = FALSE,
col.regions = brewer.pal(9, "Greys")
) +
mapview(
stations_rollout,
zcol = "rollout_year_binned",
legend = TRUE,
layer.name = "Rollout year",
col.regions = brewer.pal(4,"RdPu"),
cex = 3
)
map_2013_2015 | map_2020_2021
map_2013_2015 <- mapview(stations_rollout_2013_2015, zcol = "region",
col.regions = RColorBrewer::brewer.pal(9, "Greens"), alpha.regions = 1)
map_2020_2021 <- mapview(stations_rollout_2020_2021, zcol = "region",
col.regions = RColorBrewer::brewer.pal(9, "Greens"), alpha.regions = 1)
map_2013_2015 | map_2020_2021
map_2013_2015 <- mapview(communities) + mapview(stations_rollout_2013_2015, zcol = "region",
col.regions = RColorBrewer::brewer.pal(9, "Greens"), alpha.regions = 1)
map_2013_2015
map_2020_2021 <- mapview(communities) + mapview(stations_rollout_2020_2021, zcol = "region",
col.regions = RColorBrewer::brewer.pal(9, "Greens"), alpha.regions = 1)
map_2013_2015 | map_2020_2021
mapview(communities) + mapview(stations_rollout)
