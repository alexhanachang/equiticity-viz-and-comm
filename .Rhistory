mutate(community = community_area %>% str_to_title()) %>%
select(community, avg_in_2_mi_radius)
bikes %>%
tibble() %>%
mutate(community = community_area %>% str_to_title()) %>%
select(community, avg_in_2_mi_radius)
bikes %>%
tibble()
bikes <- read.csv("data/control_vars/comm_density_2021.csv") %>% tibble()
bikes <- bikes %>%
mutate(community = community_area %>% str_to_title()) %>%
select(community, avg_in_2_mi_radius)
bikes <- bikes %>%
mutate(community = community_area %>% str_to_title()) %>%
dplyr::select(community, avg_in_2_mi_radius)
bikes
filter(bikes, community == "Mckinley Park")
communities[46, 1] <- "McKinley Park"
communities[46, ]
bikes[46, ]
filter(bikes, community == "Mckinley Park")
bikes[39, ] <- "McKinley Park"
bikes[39, ]
bikes[39, 1] <- "McKinley Park"
bikes[39, 1]
left_join(communities, bikes, by = c("community" = "community"))
bikes_map <- left_join(communities, bikes, by = c("community" = "community"))
mapview(bikes_map)
library(tidyverse)
library(mapview)
mapviewOptions(fgb = FALSE)
bikes_map <- left_join(communities, bikes, by = c("community" = "community"))
mapview(bikes_map)
mapview(bikes_map, zcol = "avg_in_2_mi_radius")
View(bikes_map)
runApp('mapview app.R')
library(shiny); runApp('app/stations rollout app.R')
runApp('app/stations rollout app.R')
runApp('app')
## income
income_distribution <- divvy_demographics %>%
pivot_longer(
c(inc_lt_25k, inc_25_50k, inc_50_75k, inc_75_100k, inc_100_150k, inc_gt_150k),
names_to = "income",
values_to = "count"
) %>%
mutate(
community = community %>% factor(),
community_id = community_id %>% factor()
) %>%
dplyr::select(community_id, community, region, income, count) %>%
st_drop_geometry() %>%
tibble()
read_rds("data/divvy_demographics.RDS")
divvy_demographics <- read_rds("data/divvy_demographics.RDS")
## income
income_distribution <- divvy_demographics %>%
pivot_longer(
c(inc_lt_25k, inc_25_50k, inc_50_75k, inc_75_100k, inc_100_150k, inc_gt_150k),
names_to = "income",
values_to = "count"
) %>%
mutate(
community = community %>% factor(),
community_id = community_id %>% factor()
) %>%
dplyr::select(community_id, community, region, income, count) %>%
st_drop_geometry() %>%
tibble()
## income
income_distribution <- divvy_demographics %>%
pivot_longer(
c(inc_lt_25k, inc_25_50k, inc_50_75k, inc_75_100k, inc_100_150k, inc_gt_150k),
names_to = "income",
values_to = "count"
) %>%
mutate(
community = community %>% factor(),
community_id = community_id %>% factor()
) %>%
dplyr::select(community_id, community, region, income, count) %>%
st_drop_geometry() %>%
tibble()
income_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(income, count)) +
geom_col() +
labs(title = income_distribution$community[1])
income_plots <- list()
for(i in levels(income_distribution$community_id)){
plot <- income_distribution %>%
filter(community_id == i) %>%
ggplot(aes(income, count)) +
geom_col() +
labs(title = income_distribution$community[i])
income_plots[[i]] <- plot
}
mapview(
divvy_demographics,
zcol = "msh_index_score",
popup = popupGraph(income_plots))
library(RColorBrewer)
equiticitytheme_colorbrewer <- palette(
c("#FFFFFF", "#000000", "#668C7A", "#8C5F58", "#6BA033", "#EDFFF6", "#B4D9C7", "#7F998C"
))
library(mapview)
mapviewOptions(raster.palette = grey.colors,
vector.palette = colorRampPalette(c("snow", "cornflowerblue", "grey10")),
na.color = "magenta",
layers.control.pos = "topright")
mapview(
divvy_demographics,
zcol = "msh_index_score",
popup = popupGraph(income_plots))
mapview(
divvy_demographics,
zcol = "msh_index_score",
popup = c(popupGraph(income_plots), popupTable()))
mapview(
divvy_demographics,
zcol = "msh_index_score",
popup = popupGraph(income_plots),
popup = popupTable())
mapview(divvy_demographics, zcol = "prop_white")
divvy_demographics %>%
filter(community_id == 1) %>%
ggplot(aes(income, count)) +
geom_col() +
labs(title = income_distribution$community[1])
divvy_demographics
race_distribution <- divvy_demographics %>%
pivot_longer(
c(white, non_white),
names_to = "race",
values_to = "count"
) %>%
mutate(
community = community %>% factor(),
community_id = community_id %>% factor()
) %>%
dplyr::select(community_id, community, region, race, count) %>%
st_drop_geometry() %>%
tibble()
race_distribution
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(race, count)) +
geom_col() +
labs(title = income_distribution$community[1])
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(race, count)) +
geom_bar() +
labs(title = income_distribution$community[1])
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(race)) +
geom_bar() +
labs(title = income_distribution$community[1])
divvy_demographics %>%
filter(community_id == 1) %>%
ggplot(aes(white)) +
geom_bar() +
labs(title = income_distribution$community[1])
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(race)) +
geom_bar() +
labs(title = income_distribution$community[1])
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(race)) +
geom_bar(aes(fill = race)) +
labs(title = income_distribution$community[1])
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(race)) +
geom_bar(aes(fill = count)) +
labs(title = income_distribution$community[1])
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(count)) +
geom_bar(aes(fill = race)) +
labs(title = income_distribution$community[1])
race_distribution %>%
filter(community_id == 1)
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(count)) +
geom_col(aes(fill = race)) +
labs(title = income_distribution$community[1])
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(race, count)) +
geom_col(aes(fill = race)) +
labs(title = income_distribution$community[1])
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(fill = race, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[1])
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(fill = race, x = race, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[1])
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
data
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(fill = race, x = community, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[1])
race_distribution <- divvy_demographics %>%
pivot_longer(
c(white, non_white),
names_to = "race",
values_to = "count"
) %>%
mutate(
community = community %>% factor()
) %>%
dplyr::select(community_id, community, region, race, count) %>%
st_drop_geometry() %>%
tibble()
race_distribution
race_distribution %>%
filter(community_id == 1) %>%
ggplot(aes(fill = race, x = community, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[1])
race_plots <- list()
for(i in levels(race_distribution$community_id)){
plot <- race_distribution %>%
filter(community_id == i) %>%
ggplot(aes(fill = race, x = community, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[1])
race_plots[[i]] <- plot
}
mapview(divvy_demographics, popup = popupGraph(race_plots))
plot <- race_distribution %>%
filter(community_id == i) %>%
ggplot(aes(fill = race, x = community, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[1])
plot <- race_distribution %>%
filter(community_id == i) %>%
ggplot(aes(fill = race, x = community, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[i])
for(i in levels(race_distribution$community)){
plot <- race_distribution %>%
filter(community_id == i) %>%
ggplot(aes(fill = race, x = community, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[i])
race_plots[[i]] <- plot
}
mapview(divvy_demographics, popup = popupGraph(race_plots))
race_distribution <- divvy_demographics %>%
pivot_longer(
c(white, non_white),
names_to = "race",
values_to = "count"
) %>%
mutate(
community = community %>% factor(),
community_id = community_id %>% factor()
) %>%
dplyr::select(community_id, community, region, race, count) %>%
st_drop_geometry() %>%
tibble()
plot <- race_distribution %>%
filter(community_id == i) %>%
ggplot(aes(fill = race, x = community, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[i])
race_plots <- list()
for(i in levels(race_distribution$community_id)){
plot <- race_distribution %>%
filter(community_id == i) %>%
ggplot(aes(fill = race, x = community, y = count)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = income_distribution$community[i])
race_plots[[i]] <- plot
}
mapview(divvy_demographics, popup = popupGraph(race_plots))
mapview(divvy_demographics, zcol = "prop_white", popup = popupGraph(race_plots))
shiny::runApp('app')
runApp('app/stations rollout app.R')
library(shiny); runApp('app/stations rollout app.R')
runApp('app/stations rollout app.R')
stations_rollout
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(rollout_year = rollout_year %>% factor()) %>%
mutate()
stations_rollout
sttions_rollout$region
stations_rollout$region
stations_rollout$region %>% levels()
stations_rollout
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor()) %>%
mutate(region = fct_reorder(region, ))
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor()) %>%
mutate(region = fct_reorder(region))
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor()) %>%
mutate(region = fct_reorder(region))
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor())## %>%
stations_rollout
stations_rollout$region
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor()) %>%
mutate(region = fct_reorder(region, "Far North Side", "North Side", "Central", "Southeast Side",
"Southwest Side" "Far Southeast Side", "Far Southwest Side", "South Side", "West Side"))
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor()) %>%
mutate(region = fct_reorder(region, "Far North Side", "North Side", "Central", "Southeast Side",
"Southwest Side", "Far Southeast Side", "Far Southwest Side", "South Side", "West Side"))
length(stations_rollout$region)
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor())
stations_rollout
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor(),
community = community %>% factor()
)
stations_rollout
stations_rollout$region
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor(),
community = community %>% factor()
) %>%
mutate(region = fct_reorder(region, "Far North Side", "North Side", "Central", "Northwest Side"
"Southwest Side", "Far Southeast Side", "Far Southwest Side", "South Side", "West Side"))
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor(),
community = community %>% factor()
) %>%
mutate(region = fct_reorder(region, "Far North Side", "North Side", "Central", "Northwest Side",
"Southwest Side", "Far Southeast Side", "Far Southwest Side", "South Side", "West Side"))
length(stations_rollout$region)
# read in data
stations_rollout <- readRDS("data/stations_rollout.RDS") %>%
mutate(
rollout_year = rollout_year %>% factor(),
region = region %>% factor(),
community = community %>% factor()
) %>%
mutate(region = fct_relevel(region, "Far North Side", "North Side", "Central", "Northwest Side",
"Southwest Side", "Far Southeast Side", "Far Southwest Side", "South Side", "West Side"))
communities <- readRDS("data/communities.RDS") %>%
mutate(region = fct_relevel(region, "Far North Side", "North Side", "Central", "Northwest Side",
"Southwest Side", "Far Southeast Side", "Far Southwest Side", "South Side", "West Side"))
runApp('app/stations rollout app.R')
communities <- readRDS("data/communities.RDS") %>%
mutate(region = fct_relevel(region, "Far North Side", "Northwest Side", "North Side", "West Side", "Central",
"Southwest Side", "South Side", "Far Southwest Side", "Far Southeast Side"))
stations_rollout <- read_excel("drafting visualizations/vis_1/Full Network to Date Station Install Dates - 2_1_22.xlsx") %>%
janitor::clean_names() %>%
mutate(
community = (community_area %>% str_to_title()),
station = name,
rollout_year = format(as.Date(install_date, format="%Y/%m/%d"),"%Y", ),
rollout_month = format(as.Date(install_date, format="%Y/%m/%d"),"%m", )
) %>%
select(station, community, rollout_month, rollout_year, lat, lon) %>%
arrange(community) %>%
# remove rows where community_area is NA
# community_area is NA because stations are in Evanston, not Chicago
filter(!is.na(community))
library(readxl)
stations_rollout <- read_excel("drafting visualizations/vis_1/Full Network to Date Station Install Dates - 2_1_22.xlsx") %>%
janitor::clean_names() %>%
mutate(
community = (community_area %>% str_to_title()),
station = name,
rollout_year = format(as.Date(install_date, format="%Y/%m/%d"),"%Y", ),
rollout_month = format(as.Date(install_date, format="%Y/%m/%d"),"%m", )
) %>%
select(station, community, rollout_month, rollout_year, lat, lon) %>%
arrange(community) %>%
# remove rows where community_area is NA
# community_area is NA because stations are in Evanston, not Chicago
filter(!is.na(community))
# convert data frame to sf object
stations_rollout <- st_as_sf(
x = stations_rollout,
coords = c("lon", "lat"))
st_crs(stations_rollout)
st_crs(communities)
stations_rollout <- st_set_crs(stations_rollout, 4326)
communities <- st_set_crs(communities, 4326)
# use st_join() to join stations_rollout and communities
stations_rollout <- st_join(stations_rollout, left = FALSE, communities) %>%
mutate(
community = community.x
) %>%
mutate(rollout_year_binned = factor(rollout_year,
levels = c(2013, 2015, 2016, 2017, 2018, 2019, 2020, 2021),
labels = c("2013-2015", "2013-2015", "2016-2017", "2016-2017",
"2018-2019", "2018-2019", "2020-2021", "2020-2021")
)) %>%
mutate(region = fct_relevel(
region, "Far North Side", "Northwest Side", "North Side", "West Side", "Central",
"Southwest Side", "South Side", "Far Southwest Side", "Far Southeast Side")
) %>%
dplyr::select(station, community, region, rollout_year, rollout_year_binned, geometry)
# save
write_rds(stations_rollout, "data/stations_rollout.RDS")
write_rds(stations_rollout, "app/data/stations_rollout.RDS")
communities <- read_sf('data/violence_enforcement/communities/geo_export_45d4da8d-3fc8-4ccb-9b0c-8f546d526c9a.shp')
regions <- tibble(
community_id = c(1:77),
region = c(
"Far North Side", "Far North Side", "Far North Side", "Far North Side",
"North Side", "North Side", "North Side",
"Central",
"Far North Side", "Far North Side", "Far North Side", "Far North Side", "Far North Side", "Far North Side",
"Northwest Side", "Northwest Side", "Northwest Side", "Northwest Side", "Northwest Side", "Northwest Side",
"North Side", "North Side",
"West Side", "West Side", "West Side", "West Side", "West Side", "West Side", "West Side", "West Side", "West Side",
"Central", "Central",
"South Side", "South Side", "South Side", "South Side", "South Side", "South Side", "South Side", "South Side", "South Side", "South Side",
"Far Southeast Side", "Far Southeast Side", "Far Southeast Side", "Far Southeast Side", "Far Southeast Side", "Far Southeast Side", "Far Southeast Side", "Far Southeast Side", "Far Southeast Side", "Far Southeast Side", "Far Southeast Side", "Far Southeast Side",
"Southwest Side", "Southwest Side", "Southwest Side", "Southwest Side",
"South Side",
"Southwest Side", "Southwest Side", "Southwest Side", "Southwest Side", "Southwest Side", "Southwest Side", "Southwest Side", "Southwest Side",
"South Side",
"Far Southwest Side", "Far Southwest Side", "Far Southwest Side", "Far Southwest Side", "Far Southwest Side", "Far Southwest Side",
"Far North Side", "Far North Side"
))
communities <- communities %>%
mutate(
community = (communities$community %>% str_to_title()),
community_id = area_numbe,
community_id = as.numeric(community_id),
region = region %>% factor()
) %>%
mutate(
region = fct_relevel(
region, "Far North Side", "Northwest Side", "North Side", "West Side", "Central",
"Southwest Side", "South Side", "Far Southwest Side", "Far Southeast Side"
)
) %>%
arrange(community_id) %>%
left_join(regions) %>%
select(community_id, community, region, geometry)
communities <- communities %>%
mutate(
community = (communities$community %>% str_to_title()),
community_id = area_numbe,
community_id = as.numeric(community_id)
) %>%
arrange(community_id) %>%
left_join(regions) %>%
mutate(
region = region %>% factor()
) %>%
mutate(
region = fct_relevel(
region, "Far North Side", "Northwest Side", "North Side", "West Side", "Central",
"Southwest Side", "South Side", "Far Southwest Side", "Far Southeast Side"
)
) %>%
select(community_id, community, region, geometry)
communities
# rename Mckinley Park to McKinley Park
filter(communities, community == "Mckinley Park")
communities[59, 2] <- "McKinley Park"
communities
# save
saveRDS(communities, "data/communities.RDS")
saveRDS(communities, "app/data/communities.RDS")
# save
saveRDS(communities, "data/communities.RDS")
