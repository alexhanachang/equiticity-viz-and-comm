library(tidyverse)
library(rgeos)
library(sp)
library(rgdal)
library(magrittr)
library(raster)
library(sf)
library(readxl)
library(leaflet)

test_data <- read_xlsx("data/divvy_historical_first50rows - Mimi Wang.xlsx") 

neighborhood_map <- read_sf("neighborhoods/geo_export_9c969155-1ad2-4497-b263-d7a54abec1f1.shp")

ggplot(neighborhood_map) + 
  geom_sf() +
  coord_sf() 

neighborhood_map %>% 
  ggplot() + 
    geom_sf() +
    geom_sf(data = (neighborhood_map %>% 
                      filter(community == "ROGERS PARK")), 
              aes(color = "red", fill = "red")) + 
    theme_void() + 
    theme(legend.position = "none")

test_data %>% 
  leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=test_data$Longitude[1], lat=test_data$Latitude[1], 
             popup=content) 


content <- paste(sep = "<br/>",
                 "<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
                 "606 5th Ave. S",
                 "Seattle, WA 98138"
)

test_data_sf <- st_as_sf(test_data, coords = c('Longitude', 'Latitude'), crs = st_crs(neighborhood_map))

test_data <- test_data_sf %>% 
  mutate(intersection = as.integer(st_intersects(geometry, neighborhood_map)),
         neighborhood = if_else(is.na(intersection), '', neighborhood_map$community[intersection]))


# dat <- readxl::read_xlsx("combined_data_sans_geometry.xlsx")
library(tidyverse)
library(rgeos)
library(sp)
library(rgdal)
library(magrittr)
library(raster)
library(sf)


ggplot(dat) + 
  geom_sf(aes(fill = black_perc)) +
  geom_point(data = bike_loc, aes(x = Longitude, y = Latitude), alpha = .2, color = "red") +
  coord_sf() +
  scale_fill_viridis_c() +
  theme_classic() +
  theme(axis.ticks = element_blank(),
        axis.text = element_blank(),
        axis.line = element_blank()) +
  labs(fill = "% Black")

# 
# 
# 
# test_data_done <- tibble(test_data)
# 
# tract_map <- read_sf("census_tracts/geo_export_c8ec6a1a-b3b4-490e-9319-f32777c20c5b.shp")
# 
# chicago_join <- st_join(neighborhood_map, tract_map, left = FALSE, largest = TRUE)
# 
# 
# census_match_map <- read_csv("data/CensusTractsTIGER2010.csv")
# 
# tract_to_neighborhood <- function(tract_data, tract_num_column){
#   tract_data <- tract_data %>%
#     add_column(neighborhood = NA)
#   for (i in 1:nrow(tract_data)){
#     row_num <- which(rownames(census_match_map) == tract_num_column[i]) 
#     neighborhood_num <- census_match_map$COMMAREA_N[row_num]
#     tract_data$neighborhood[i] <- neighborhood_num
#     
#   }
#   return(tract_data)
}
